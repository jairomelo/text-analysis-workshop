[
  {
    "objectID": "01-basicConcepts.html",
    "href": "01-basicConcepts.html",
    "title": "What is Text Analysis?",
    "section": "",
    "text": "Text analysis is an umbrella concept that involves multiple techniques, methods, and approaches for “extracting” the meaning, structure, or general characteristics of a text by analyzing its constitutive words and symbols, and their relationships with a context, epoch, trend, intention, etc.\nThanks to the massification of computers and the miniaturization of computer power, computational methods for text analysis have become prevalent in certain contexts, allowing researchers to analyze large corpora of texts and also extrapolate those concepts for purposes beyond academic research, such as commercial text processing, sentiment analysis, or information retrieval.\nBuilding on these foundations, this workshop focuses on the basic processes required to prepare a corpus of texts for analysis, and applies introductory analytical techniques that establish common ground for more complex tasks such as sentiment analysis, language modeling, topic modeling, or text generation.",
    "crumbs": [
      "1. Basic Concepts"
    ]
  },
  {
    "objectID": "01-basicConcepts.html#text-analysis-fundamentals",
    "href": "01-basicConcepts.html#text-analysis-fundamentals",
    "title": "What is Text Analysis?",
    "section": "Text Analysis Fundamentals",
    "text": "Text Analysis Fundamentals\nTo introduce the most basic tasks of text analysis, let’s use as an example the short story by Franz Kafka, “Before the Law”, originally published in 1915. We’re going to use Ian Johnston’s translation as our working text.\n\nBEFORE THE LAW\nBefore the law sits a gatekeeper. To this gatekeeper comes a man from the country who asks to gain entry into the law. But the gatekeeper says that he cannot grant him entry at the moment. The man thinks about it and then asks if he will be allowed to come in sometime later on. “It is possible,” says the gatekeeper, “but not now.” The gate to the law stands open, as always, and the gatekeeper walks to the side, so the man bends over in order to see through the gate into the inside. When the gatekeeper notices that, he laughs and says: “If it tempts you so much, try going inside in spite of my prohibition. But take note. I am powerful. And I am only the lowliest gatekeeper. But from room to room stand gatekeepers, each more powerful than the last. I cannot endure even one glimpse of the third.” The man from the country has not expected such difficulties: the law should always be accessible for everyone, he thinks, but as he now looks more closely at the gatekeeper in his fur coat, at his large pointed nose and his long, thin, black Tartar’s beard, he decides that it would be better to wait until he gets permission to go inside. The gatekeeper gives him a stool and allows him to sit down at the side in front of the gate. There he sits for days and years. He makes many attempts to be let in, and he wears the gatekeeper out with his requests. The gatekeeper often interrogates him briefly, questioning him about his homeland and many other things, but they are indifferent questions, the kind great men put, and at the end he always tells him once more that he cannot let him inside yet. The man, who has equipped himself with many things for his journey, spends everything, no matter how valuable, to win over the gatekeeper. The latter takes it all but, as he does so, says, “I am taking this only so that you do not think you have failed to do anything.” During the many years the man observes the gatekeeper almost continuously. He forgets the other gatekeepers, and this first one seems to him the only obstacle for entry into the law. He curses the unlucky circumstance, in the first years thoughtlessly and out loud; later, as he grows old, he only mumbles to himself. He becomes childish and, since in the long years studying the gatekeeper he has also come to know the fleas in his fur collar, he even asks the fleas to help him persuade the gatekeeper. Finally his eyesight grows weak, and he does not know whether things are really darker around him or whether his eyes are merely deceiving him. But he recognizes now in the darkness an illumination which breaks inextinguishably out of the gateway to the law. Now he no longer has much time to live. Before his death he gathers up in his head all his experiences of the entire time into one question which he has not yet put to the gatekeeper. He waves to him, since he can no longer lift up his stiffening body. The gatekeeper has to bend way down to him, for the difference between them has changed considerably to the disadvantage of the man. “What do you want to know now?” asks the gatekeeper. “You are insatiable.” “Everyone strives after the law,” says the man, “so how is it that in these many years no one except me has requested entry?” The gatekeeper sees that the man is already dying and, in order to reach his diminishing sense of hearing, he shouts at him, “Here no one else can gain entry, since this entrance was assigned only to you. I’m going now to close it.\n\nNow, let’s perform a very basic task in text analysis: calculate the length of the text. Take your time and count how many words are in this text, without the title.\nAs a second task, can you identify the most frequently used word in the text? You can ignore common stop words (e.g., “the”, “and”, “is”, etc.) for this task.\nEvidently, doing this type of task manually is tedious and error-prone. However, this is how text analysis was originally performed. Nowadays, these tasks can be automated using various tools and programming languages, such as Python or R.\nLet’s use R to perform these same tasks more efficiently with plain R code. We’ll use the strsplit() function to split the text into words, and then count them using the lengths() function.”\n\nbeforethelaw &lt;- \"Before the law sits a gatekeeper. To this gatekeeper comes a man from the country who asks to gain entry into the law. But the gatekeeper says that he cannot grant him entry at the moment. The man thinks about it and then asks if he will be allowed to come in sometime later on. “It is possible,” says the gatekeeper, “but not now.” The gate to the law stands open, as always, and the gatekeeper walks to the side, so the man bends over in order to see through the gate into the inside. When the gatekeeper notices that, he laughs and says: “If it tempts you so much, try going inside in spite of my prohibition. But take note. I am powerful. And I am only the lowliest gatekeeper. But from room to room stand gatekeepers, each more powerful than the last. I cannot endure even one glimpse of the third.” The man from the country has not expected such difficulties: the law should always be accessible for everyone, he thinks, but as he now looks more closely at the gatekeeper in his fur coat, at his large pointed nose and his long, thin, black Tartar’s beard, he decides that it would be better to wait until he gets permission to go inside. The gatekeeper gives him a stool and allows him to sit down at the side in front of the gate. There he sits for days and years. He makes many attempts to be let in, and he wears the gatekeeper out with his requests. The gatekeeper often interrogates him briefly, questioning him about his homeland and many other things, but they are indifferent questions, the kind great men put, and at the end he always tells him once more that he cannot let him inside yet. The man, who has equipped himself with many things for his journey, spends everything, no matter how valuable, to win over the gatekeeper. The latter takes it all but, as he does so, says, “I am taking this only so that you do not think you have failed to do anything.” During the many years the man observes the gatekeeper almost continuously. He forgets the other gatekeepers, and this first one seems to him the only obstacle for entry into the law. He curses the unlucky circumstance, in the first years thoughtlessly and out loud; later, as he grows old, he only mumbles to himself. He becomes childish and, since in the long years studying the gatekeeper he has also come to know the fleas in his fur collar, he even asks the fleas to help him persuade the gatekeeper. Finally his eyesight grows weak, and he does not know whether things are really darker around him or whether his eyes are merely deceiving him. But he recognizes now in the darkness an illumination which breaks inextinguishably out of the gateway to the law. Now he no longer has much time to live. Before his death he gathers up in his head all his experiences of the entire time into one question which he has not yet put to the gatekeeper. He waves to him, since he can no longer lift up his stiffening body. The gatekeeper has to bend way down to him, for the difference between them has changed considerably to the disadvantage of the man. “What do you want to know now?” asks the gatekeeper. “You are insatiable.” “Everyone strives after the law,” says the man, “so how is it that in these many years no one except me has requested entry?” The gatekeeper sees that the man is already dying and, in order to reach his diminishing sense of hearing, he shouts at him, “Here no one else can gain entry, since this entrance was assigned only to you. I’m going now to close it.\"\n\n# Split the string into words based on whitespace\nword_list &lt;- strsplit(beforethelaw, \"\\\\W+\") # Split by non-word characters\n\n# Count the words\nword_count &lt;- lengths(word_list)\n\nword_count\n\n[1] 642\n\n\nEven this apparently short text has 640 words, which would be quite tedious to count manually. In seconds, R has accomplished what might have taken us considerable time and effort by hand.\nNow, let’s find the most frequently used word in the text. We’ll use the table() function to count word frequencies, then identify the most common word:\n\nword_counts &lt;- table(unlist(word_list))\n\nmost_frequent_word &lt;- names(word_counts)[which.max(word_counts)]\n\nmost_frequent_word\n\n[1] \"the\"\n\n\nThe most frequently used word in the text is “the”, which appears 20 times. This is a common stop word in English, so let’s remove it and find the next most frequent word. Rather than manually creating our own list of stop words, we can use an existing comprehensive list prepared for this purpose, such as the one provided by stopwords ISO. We’ll use their English stopwords file: https://raw.githubusercontent.com/stopwords-iso/stopwords-en/refs/heads/master/stopwords-en.txt. ou don’t need to download this file, as we can read it directly from the web using the readLines() function.\n\n# Read the stop words from the web\nstop_words_url &lt;- \"https://raw.githubusercontent.com/stopwords-iso/stopwords-en/refs/heads/master/stopwords-en.txt\"\nstop_words &lt;- readLines(stop_words_url)\n\nWarning in readLines(stop_words_url): incomplete final line found on\n'https://raw.githubusercontent.com/stopwords-iso/stopwords-en/refs/heads/master/stopwords-en.txt'\n\n# Remove common stop words\nword_counts_filtered &lt;- word_counts[!names(word_counts) %in% stop_words]\nmost_frequent_word_filtered &lt;- names(word_counts_filtered)[which.max(word_counts_filtered)]\nmost_frequent &lt;- word_counts_filtered[most_frequent_word_filtered]\nmost_frequent\n\ngatekeeper \n        19 \n\n\nAnd now we have a winner! The most frequently used word in the text, after removing common stop words, is “gatekeeper”, which appears 12 times. In this text, the “gatekeeper” is not merely a character, but represents the central theme of the story. The gatekeeper serves as a complex metaphor for the complexities of the law and the seemingly infinite barriers that prevent ordinary people from accessing it—without suggesting that the law is inherently closed to them (which is why the gate remains open throughout). The intricacies of this complex story are beyond the scope of this workshop, but it is interesting to see how a simple frequency analysis can reveal the thematic core of a text.\n\n\n\n\n\n\nCross-linguistic Analysis\n\n\n\nInterestingly, performing the same analysis on Kafka’s original German text reveals “Türhüter” (gatekeeper) as the most frequent non-stopword, matching our English results. This consistency across languages suggests that frequency analysis can reliably identify thematically central terms, even accounting for translation differences.\n\n\nThis is a very basic example where we implemented each step manually to demonstrate the underlying processes. However, in practice, after decades of computational text analysis development, there are many specialized packages and libraries that can perform these tasks more efficiently. For example, in R, we can use the tidytext package to handle text data in a tidy format, making it easier to manipulate and analyze.\nIn the next episode, we will explore how to create a corpus of texts and prepare it for analysis. We will also cover some basic preprocessing steps, such as removing punctuation, converting text to lowercase, and tokenizing the text into words or sentences. This will establish the foundation for more advanced text analysis techniques that we will explore later in this workshop.",
    "crumbs": [
      "1. Basic Concepts"
    ]
  },
  {
    "objectID": "02-CreatingACorpus.html",
    "href": "02-CreatingACorpus.html",
    "title": "Creating a Corpus",
    "section": "",
    "text": "In this episode, we’re going to create a corpus of texts and prepare it for analysis by performing some standard preprocessing. Because of the nature of R, we will be transforming plain text files into tibbles, which are a modern take on data frames that make data manipulation easier and more intuitive.\nTo better understand what happens when we process a series of books, let’s start with an exercise using Kafka’s short story “Before the Law.”\nFirst, we need to install and load the tidyverse package, which includes dplyr, ggplot2, and other useful packages for data manipulation and visualization.\nIn RStudio, create a new R script (File → New File → R Script) and write the following commands. You can execute each line by placing your cursor on it and pressing Ctrl+Enter:\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\nNext, we’ll create a text variable that stores our short story. We’re using tryCatch() to handle any potential errors when reading the file, and the read_lines() function, which is part of the readr package, to read the text file line by line safely.\nbeforethelaw_url &lt;- \"https://raw.githubusercontent.com/jairomelo/text-analysis-workshop/refs/heads/main/episodes/texts/Kafka-beforethelaw.txt\"\n\nbeforethelaw &lt;- tryCatch(\n    read_lines(beforethelaw_url, locale = locale(encoding = \"UTF-8\")),\n    error = function(e) {\n        message(\"Error reading the text: \", e)\n        return(NULL)\n    }\n)\n\nbeforethelaw\n\n[1] \"BEFORE THE LAW\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \n[2] \"\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   \n[3] \"Before the law sits a gatekeeper. To this gatekeeper comes a man from the country who asks to gain entry into the law. But the gatekeeper says that he cannot grant him entry at the moment. The man thinks about it and then asks if he will be allowed to come in sometime later on. “It is possible,” says the gatekeeper, “but not now.” The gate to the law stands open, as always, and the gatekeeper walks to the side, so the man bends over in order to see through the gate into the inside. When the gatekeeper notices that, he laughs and says: “If it tempts you so much, try going inside in spite of my prohibition. But take note. I am powerful. And I am only the lowliest gatekeeper. But from room to room stand gatekeepers, each more powerful than the last. I cannot endure even one glimpse of the third.” The man from the country has not expected such difficulties: the law should always be accessible for everyone, he thinks, but as he now looks more closely at the gatekeeper in his fur coat, at his large pointed nose and his long, thin, black Tartar’s beard, he decides that it would be better to wait until he gets permission to go inside. The gatekeeper gives him a stool and allows him to sit down at the side in front of the gate. There he sits for days and years. He makes many attempts to be let in, and he wears the gatekeeper out with his requests. The gatekeeper often interrogates him briefly, questioning him about his homeland and many other things, but they are indifferent questions, the kind great men put, and at the end he always tells him once more that he cannot let him inside yet. The man, who has equipped himself with many things for his journey, spends everything, no matter how valuable, to win over the gatekeeper. The latter takes it all but, as he does so, says, “I am taking this only so that you do not think you have failed to do anything.” During the many years the man observes the gatekeeper almost continuously. He forgets the other gatekeepers, and this first one seems to him the only obstacle for entry into the law. He curses the unlucky circumstance, in the first years thoughtlessly and out loud; later, as he grows old, he only mumbles to himself. He becomes childish and, since in the long years studying the gatekeeper he has also come to know the fleas in his fur collar, he even asks the fleas to help him persuade the gatekeeper. Finally his eyesight grows weak, and he does not know whether things are really darker around him or whether his eyes are merely deceiving him. But he recognizes now in the darkness an illumination which breaks inextinguishably out of the gateway to the law. Now he no longer has much time to live. Before his death he gathers up in his head all his experiences of the entire time into one question which he has not yet put to the gatekeeper. He waves to him, since he can no longer lift up his stiffening body. The gatekeeper has to bend way down to him, for the difference between them has changed considerably to the disadvantage of the man. “What do you want to know now?” asks the gatekeeper. “You are insatiable.” “Everyone strives after the law,” says the man, “so how is it that in these many years no one except me has requested entry?” The gatekeeper sees that the man is already dying and, in order to reach his diminishing sense of hearing, he shouts at him, “Here no one else can gain entry, since this entrance was assigned only to you. I’m going now to close it.”\"\nNow that we have our text stored as a character vector, we can transform it into a tibble. This process includes removing the title and filtering out empty lines.\nTo remove the title, we can use the str_remove_all() function from the stringr package. Our approach in this case is very direct, as we are matching the exact title line.\nTo remove the empty lines we can use the filter() function from dplyr to match non-empty strings.\nFinally, because we’re transforming the character vector into a tibble, it’s important to add an ID column to preserve the original line order and uniquely identify each line.\nbeforethelaw &lt;- beforethelaw %&gt;%\n    str_remove_all(\"^BEFORE THE LAW$\") # Remove the exact title line (^ = start, $ = end)\n\nbeforethelaw_tibble &lt;- tibble(text = beforethelaw) %&gt;%\n    filter(text != \"\") %&gt;% # Remove empty lines\n    mutate(id = row_number()) # Add an ID column to preserve line order\n\nbeforethelaw_tibble\n\n# A tibble: 1 × 2\n  text                                                                        id\n  &lt;chr&gt;                                                                    &lt;int&gt;\n1 Before the law sits a gatekeeper. To this gatekeeper comes a man from t…     1\nThe result is a two-column tibble: one for the text and another for the line ID.\nNow, we can proceed to perform some preprocessing steps to prepare our text for analysis. This includes converting the text to lowercase, removing punctuation, and tokenizing the text into individual words.",
    "crumbs": [
      "2. Creating a Corpus"
    ]
  },
  {
    "objectID": "02-CreatingACorpus.html#preprocessing-steps",
    "href": "02-CreatingACorpus.html#preprocessing-steps",
    "title": "Creating a Corpus",
    "section": "Preprocessing Steps",
    "text": "Preprocessing Steps\nAlthough a text can be analyzed in its raw form, preprocessing is essential for improving the quality of the analysis. Here are the key steps we’ll perform:\n\nConvert to Lowercase: This helps to standardize the text and avoid treating the same words with different cases as distinct.\nRemove Punctuation: Punctuation marks can interfere with text analysis (e.g., “gatekeeper.” would be considered different from “gatekeeper”), so we’ll remove them.\nTokenization: This is the process of splitting the text into individual words or tokens, which is crucial for most text analysis tasks.\n\nLet’s implement these preprocessing steps using dplyr, stringr, and tidytext. This approach allows us to chain multiple operations together:\n\nlibrary(tidytext) # We'll need this for tokenization\n\nbeforethelaw_preprocessed &lt;- beforethelaw_tibble %&gt;%\n    mutate(text = str_to_lower(text)) %&gt;%        # Convert to lowercase\n    mutate(text = str_remove_all(text, \"[[:punct:]]\")) %&gt;%  # Remove punctuation\n    unnest_tokens(word, text)                    # Tokenization into individual words\n\nbeforethelaw_preprocessed\n\n# A tibble: 640 × 2\n      id word      \n   &lt;int&gt; &lt;chr&gt;     \n 1     1 before    \n 2     1 the       \n 3     1 law       \n 4     1 sits      \n 5     1 a         \n 6     1 gatekeeper\n 7     1 to        \n 8     1 this      \n 9     1 gatekeeper\n10     1 comes     \n# ℹ 630 more rows\n\n\nWe’ve transformed our single-row tibble into a long 640-row tibble, where each row represents a single word from the original text. The unnest_tokens() function from the tidytext package is particularly useful here, as it automatically handles tokenization and creates a new row for each word.\nNote that this number of rows matches the word count from the previous episode. However, this alignment won’t always occur. Depending on text complexity, basic word counting and tokenization can produce different results. For example, tokenization might split contractions (“don’t” → “don” + “t”) or treat hyphenated words (“twenty-one”) as separate tokens, while a simple word count would treat them as single units.\nDepending on the purposes of your analysis, you may want to perform additional preprocessing steps, such as removing stop words (common words like “the,” “and,” “is” that may not carry significant meaning for analysis). Let’s remove stop words for this example using the tidytext package:\n\nbeforethelaw_reduced &lt;- beforethelaw_preprocessed %&gt;%\n    anti_join(stop_words, by = \"word\") # anti_join removes words that match the stop_words list\n\nbeforethelaw_reduced\n\n# A tibble: 164 × 2\n      id word      \n   &lt;int&gt; &lt;chr&gt;     \n 1     1 law       \n 2     1 sits      \n 3     1 gatekeeper\n 4     1 gatekeeper\n 5     1 country   \n 6     1 gain      \n 7     1 entry     \n 8     1 law       \n 9     1 gatekeeper\n10     1 grant     \n# ℹ 154 more rows\n\n\nThis new tibble has 164 rows, meaning we’ve reduced our original text by 75% by removing stop words. This is important to keep in mind, as preprocessing can improve analysis quality by reducing noise and focusing on relevant terms, but it can also result in a loss of context or meaning that may be important for certain types of analysis.\n\n\n\n\n\n\nNote\n\n\n\nStop word removal isn’t always necessary. For tasks like authorship attribution or sentiment analysis, these “common” words can actually provide valuable information about writing style or tone.",
    "crumbs": [
      "2. Creating a Corpus"
    ]
  },
  {
    "objectID": "02-CreatingACorpus.html#create-a-corpus",
    "href": "02-CreatingACorpus.html#create-a-corpus",
    "title": "Creating a Corpus",
    "section": "Create a Corpus",
    "text": "Create a Corpus\nThe term “corpus” is borrowed from Latin. The main meaning of that word is “body,” but in medieval Latin, a collection of writings about the same topic were also called “corpus” (e.g. the “Corpus Juris Civilis”). In text analysis, we use this term more broadly to refer to the entire body of text that we are analyzing, but usually it implies a previous curation of what texts are included so that they share a common theme, time period, or author. Corpora can range from a few documents to millions of texts, depending on the research question.\nWe’ve curated a corpus of classic works in the public domain. These works share some common themes, styles, and historical contexts, making them suitable for comparative analysis.\nWe have included 26 works by 20 authors, from a period spanning from 1726 to 1925, although, most works are from the 19th century. We aim to create a corpus useful for demonstration purposes while keeping some consistency in terms of length and genre to allow for meaningful comparisons.\nThe glID column contains Project Gutenberg identification numbers, which can be used to construct URLs for downloading the full texts.\n\ncorpus &lt;- tribble(\n  ~author, ~title, ~year, ~glID, ~genre,\n  \"Jane Austen\", \"Pride and Prejudice\", 1813, 1342, \"Social Fiction\",\n  \"Charles Dickens\", \"A Tale of Two Cities\", 1859, 98, \"Social Fiction\",\n  \"F. Scott Fitzgerald\", \"The Great Gatsby\", 1925, 64317, \"Social Fiction\",\n  \"Mary Wollstonecraft Shelley\", \"Frankenstein; Or, The Modern Prometheus\", 1818, 84, \"Gothic\",\n  \"Herman Melville\", \"Moby Dick\", 1851, 2701, \"Adventure\",\n  \"Louisa May Alcott\", \"Little Women\", 1868, 37106, \"Domestic Fiction\",\n  \"Mark Twain\", \"Tom Sawyer\", 1876, 74, \"Adventure\",\n  \"Jonathan Swift\", \"Gulliver's Travels\", 1726, 17157, \"Satirical Fiction\",\n  \"E. M. Forster\", \"A Room with a View\", 1908, 2641, \"Social Fiction\",\n  \"Elizabeth Von Arnim\", \"The Enchanted April\", 1922, 16389, \"Social Fiction\",\n  \"Lewis Carroll\", \"Alice's Adventures in Wonderland\", 1865, 11, \"Fantasy\",\n  \"Elizabeth Gaskell\", \"Cranford\", 1853, 394, \"Domestic Fiction\",\n  \"Charles Dickens\", \"The Pickwick Papers\", 1836, 580, \"Social Fiction\",\n  \"J. M. Barrie\", \"Peter Pan\", 1911, 16, \"Fantasy\",\n  \"Charles Dickens\", \"Great Expectations\", 1861, 1400, \"Social Fiction\",\n  \"Harriet Beecher Stowe\", \"Uncle Tom's Cabin\", 1852, 203, \"Social Fiction\",\n  \"Robert Louis Stevenson\", \"Treasure Island\", 1883, 120, \"Adventure\",\n  \"Kenneth Grahame\", \"The Wind in the Willows\", 1908, 27805, \"Fantasy\",\n  \"Jules Verne\", \"Twenty Thousand Leagues Under the Seas\", 1870, 2488, \"Science Fiction\",\n  \"Jules Verne\", \"A Journey to the Centre of the Earth\", 1864, 18857, \"Science Fiction\",\n  \"Jules Verne\", \"Around the World in Eighty Days\", 1873, 103, \"Adventure\",\n  \"Bram Stoker\", \"Dracula\", 1897, 345, \"Gothic\",\n  \"H. G. Wells\", \"The Time Machine\", 1895, 35, \"Science Fiction\",\n  \"Charlotte Brontë\", \"Jane Eyre\", 1847, 1260, \"Gothic\",\n  \"Jane Austen\", \"Northanger Abbey\", 1817, 121, \"Social Fiction\",\n  \"Elizabeth Gaskell\", \"North and South\", 1855, 4276, \"Social Fiction\"\n)\n\ncorpus\n\n# A tibble: 26 × 5\n   author                      title                            year  glID genre\n   &lt;chr&gt;                       &lt;chr&gt;                           &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 Jane Austen                 Pride and Prejudice              1813  1342 Soci…\n 2 Charles Dickens             A Tale of Two Cities             1859    98 Soci…\n 3 F. Scott Fitzgerald         The Great Gatsby                 1925 64317 Soci…\n 4 Mary Wollstonecraft Shelley Frankenstein; Or, The Modern P…  1818    84 Goth…\n 5 Herman Melville             Moby Dick                        1851  2701 Adve…\n 6 Louisa May Alcott           Little Women                     1868 37106 Dome…\n 7 Mark Twain                  Tom Sawyer                       1876    74 Adve…\n 8 Jonathan Swift              Gulliver's Travels               1726 17157 Sati…\n 9 E. M. Forster               A Room with a View               1908  2641 Soci…\n10 Elizabeth Von Arnim         The Enchanted April              1922 16389 Soci…\n# ℹ 16 more rows\n\n\nWe can have a glimpse of the corpus by examining how many authors and how many genres are represented.\n\n# Examine the corpus\ncorpus %&gt;%\n  count(author, sort = TRUE)\n\n# A tibble: 20 × 2\n   author                          n\n   &lt;chr&gt;                       &lt;int&gt;\n 1 Charles Dickens                 3\n 2 Jules Verne                     3\n 3 Elizabeth Gaskell               2\n 4 Jane Austen                     2\n 5 Bram Stoker                     1\n 6 Charlotte Brontë                1\n 7 E. M. Forster                   1\n 8 Elizabeth Von Arnim             1\n 9 F. Scott Fitzgerald             1\n10 H. G. Wells                     1\n11 Harriet Beecher Stowe           1\n12 Herman Melville                 1\n13 J. M. Barrie                    1\n14 Jonathan Swift                  1\n15 Kenneth Grahame                 1\n16 Lewis Carroll                   1\n17 Louisa May Alcott               1\n18 Mark Twain                      1\n19 Mary Wollstonecraft Shelley     1\n20 Robert Louis Stevenson          1\n\ncorpus %&gt;%\n  count(genre, sort = TRUE)\n\n# A tibble: 7 × 2\n  genre                 n\n  &lt;chr&gt;             &lt;int&gt;\n1 Social Fiction       10\n2 Adventure             4\n3 Fantasy               3\n4 Gothic                3\n5 Science Fiction       3\n6 Domestic Fiction      2\n7 Satirical Fiction     1\n\n\nWe can observe how our corpus contains works by mostly individual authors, although with some exceptions as Dickens, Verne, Gaskell and Austen. In terms of genres, we have a diverse range, with a strong representation of Social Fiction, Adventure, and Fantasy, alongside notable works in Gothic and Science Fiction.\nAnother relevant point about this corpus is that it represents what became the “standard” English-language literary canon, even with the inclusion of Verne’s works, which were originally written in French but became deeply embedded in English-language reading culture through translation. This corpus is a good starting point for exploring the evolution of English literature and the themes that have persisted over time.\n\nFetch the Texts\nOur next step is to fetch the full text that constitutes our corpus. We will use the glID (Gutenberg Library ID) to retrieve the texts from the Project Gutenberg website. To facilitate this process, we can use the gutenbergr package in R, which handles the downloading and cleaning automatically.\nStep by step, what we are going to do is install and load the gutenbergr package, which handles the downloading and cleaning automatically (removing Project Gutenberg headers, footers, and formatting markers).\n\ninstall.packages(\"gutenbergr\") # Install if needed (run once)\nlibrary(gutenbergr)\n\nAfter that, we need to iterate over the glIDs in our corpus for the package to know what book to download. The function gutenberg_download() will take the glID as an argument and return the full text of the book as a tibble with two columns, like this one:\n\ngutenberg_download(1342) # 1342 is the ID for \"Pride and Prejudice\"\n\nDetermining mirror for Project Gutenberg from\nhttps://www.gutenberg.org/robot/harvest.\nUsing mirror http://aleph.gutenberg.org.\n\n\n# A tibble: 14,527 × 2\n   gutenberg_id text                                            \n          &lt;int&gt; &lt;chr&gt;                                           \n 1         1342 \"                             GEORGE ALLEN\"     \n 2         1342 \"                               PUBLISHER\"      \n 3         1342 \"\"                                              \n 4         1342 \"                        156 CHARING CROSS ROAD\"\n 5         1342 \"                                LONDON\"        \n 6         1342 \"\"                                              \n 7         1342 \"                             RUSKIN HOUSE\"     \n 8         1342 \"                                   ]\"          \n 9         1342 \"\"                                              \n10         1342 \"                            [Illustration:\"    \n# ℹ 14,517 more rows\n\n\nThis tibble needs to be transformed into a single text string that fits in a column of our corpus tibble. We can use the pull() function to extract the text column and then use paste(collapse = \" \") to concatenate all the lines into a single string.\n\n# Download all books at once\ncorpus_texts &lt;- corpus %&gt;%\n   mutate(text = map(glID, ~gutenberg_download(.x) %&gt;%\n   pull(text) %&gt;%\n   paste(collapse = \" \")))\n\ncorpus_texts\n\n# A tibble: 26 × 6\n   author                      title                      year  glID genre text \n   &lt;chr&gt;                       &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lis&gt;\n 1 Jane Austen                 Pride and Prejudice        1813  1342 Soci… &lt;chr&gt;\n 2 Charles Dickens             A Tale of Two Cities       1859    98 Soci… &lt;chr&gt;\n 3 F. Scott Fitzgerald         The Great Gatsby           1925 64317 Soci… &lt;chr&gt;\n 4 Mary Wollstonecraft Shelley Frankenstein; Or, The Mo…  1818    84 Goth… &lt;chr&gt;\n 5 Herman Melville             Moby Dick                  1851  2701 Adve… &lt;chr&gt;\n 6 Louisa May Alcott           Little Women               1868 37106 Dome… &lt;chr&gt;\n 7 Mark Twain                  Tom Sawyer                 1876    74 Adve… &lt;chr&gt;\n 8 Jonathan Swift              Gulliver's Travels         1726 17157 Sati… &lt;chr&gt;\n 9 E. M. Forster               A Room with a View         1908  2641 Soci… &lt;chr&gt;\n10 Elizabeth Von Arnim         The Enchanted April        1922 16389 Soci… &lt;chr&gt;\n# ℹ 16 more rows\n\n\n\n\n\n\n\n\nUnderstanding the map() function\n\n\n\n\n\nThe map() function from the purrr package (part of tidyverse) applies a function to each element of a vector or list. In our case:\n\nmap(glID, ~...) takes each ID from the glID column\nThe ~ creates an anonymous function (similar to a lambda function in Python)\n.x represents each individual ID as map() processes them one by one\nSo ~gutenberg_download(.x) means “for each ID, download that book”\n\nThis is equivalent to writing a for loop, but more concise and functional programming style. The result is that each book gets downloaded and processed, creating a new text column in our tibble.\nIf you’re new to map(), think of it as “do this same operation to every item in this list.”\n\n\n\nIn the end, we will have a corpus_texts tibble that contains the full text of each book in our corpus as a character vector stored in the text column.",
    "crumbs": [
      "2. Creating a Corpus"
    ]
  }
]