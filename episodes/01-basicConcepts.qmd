---
title: "What is Text Analysis?"
engine: knitr
format:
  html:
    fig-width: 10
    fig-height: 12
    dpi: 300
editor_options: 
  chunk_output_type: inline
---

Text analysis is an umbrella concept that involves multiple techniques, methods, and approaches for "extracting" the meaning, structure, or general characteristics of a text by analyzing its constitutive words and symbols, and their relationships with a context, epoch, trend, intention, etc.

Thanks to the massification of computers and the miniaturization of computer power, computational methods for text analysis have become prevalent in certain contexts, allowing researchers to analyze large corpora of texts and also extrapolate those concepts for purposes beyond academic research, such as commercial text processing, sentiment analysis, or information retrieval.

Building on these foundations, this workshop focuses on the basic processes required to prepare a corpus of texts for analysis, and applies introductory analytical techniques that establish common ground for more complex tasks such as sentiment analysis, language modeling, topic modeling, or text generation.

::: {.callout-note title="NLP"}
Although Natural Language Processing (NLP) is sometimes used as a synonym for text analysis, Text Analysis encompasses both computational and non-computational approaches to analyzing text. NLP is primarily concerned with the interaction between computers and human language. It focuses on developing algorithms and models that enable machines to understand, interpret, and generate human language.
:::

## Text Analysis Fundamentals

To introduce the most basic tasks of text analysis, let's use as an example the short story by Franz Kafka, "Before the Law", originally published in 1915. We're going to use [Ian Johnston's translation](https://johnstoniatexts.x10host.com/kafka/beforethelawhtml.html) as our working text.


> BEFORE THE LAW
> 
> Before the law sits a gatekeeper. To this gatekeeper comes a man from the country who asks to gain entry into the law. But the gatekeeper says that he cannot grant him entry at the moment. The man thinks about it and then asks if he will be allowed to come in sometime later on. “It is possible,” says the gatekeeper, “but not now.” The gate to the law stands open, as always, and the gatekeeper walks to the side, so the man bends over in order to see through the gate into the inside. When the gatekeeper notices that, he laughs and says: “If it tempts you so much, try going inside in spite of my prohibition. But take note. I am powerful. And I am only the lowliest gatekeeper. But from room to room stand gatekeepers, each more powerful than the last. I cannot endure even one glimpse of the third.” The man from the country has not expected such difficulties: the law should always be accessible for everyone, he thinks, but as he now looks more closely at the gatekeeper in his fur coat, at his large pointed nose and his long, thin, black Tartar’s beard, he decides that it would be better to wait until he gets permission to go inside. The gatekeeper gives him a stool and allows him to sit down at the side in front of the gate. There he sits for days and years. He makes many attempts to be let in, and he wears the gatekeeper out with his requests. The gatekeeper often interrogates him briefly, questioning him about his homeland and many other things, but they are indifferent questions, the kind great men put, and at the end he always tells him once more that he cannot let him inside yet. The man, who has equipped himself with many things for his journey, spends everything, no matter how valuable, to win over the gatekeeper. The latter takes it all but, as he does so, says, “I am taking this only so that you do not think you have failed to do anything.” During the many years the man observes the gatekeeper almost continuously. He forgets the other gatekeepers, and this first one seems to him the only obstacle for entry into the law. He curses the unlucky circumstance, in the first years thoughtlessly and out loud; later, as he grows old, he only mumbles to himself. He becomes childish and, since in the long years studying the gatekeeper he has also come to know the fleas in his fur collar, he even asks the fleas to help him persuade the gatekeeper. Finally his eyesight grows weak, and he does not know whether things are really darker around him or whether his eyes are merely deceiving him. But he recognizes now in the darkness an illumination which breaks inextinguishably out of the gateway to the law. Now he no longer has much time to live. Before his death he gathers up in his head all his experiences of the entire time into one question which he has not yet put to the gatekeeper. He waves to him, since he can no longer lift up his stiffening body. The gatekeeper has to bend way down to him, for the difference between them has changed considerably to the disadvantage of the man. “What do you want to know now?” asks the gatekeeper. “You are insatiable.” “Everyone strives after the law,” says the man, “so how is it that in these many years no one except me has requested entry?” The gatekeeper sees that the man is already dying and, in order to reach his diminishing sense of hearing, he shouts at him, “Here no one else can gain entry, since this entrance was assigned only to you. I’m going now to close it.

Now, let's perform a very basic task in text analysis: calculate the length of the text. Take your time and count how many words are in this text, without the title.

As a second task, can you identify the most frequently used word in the text? You can ignore common stop words (e.g., "the", "and", "is", etc.) for this task.

Evidently, doing this type of task manually is tedious and error-prone. However, this is how text analysis was originally performed. Nowadays, these tasks can be automated using various tools and programming languages, such as Python or R.

Let's use R to perform these same tasks more efficiently with plain `R` code. We'll use the `strsplit()` function to split the text into words, and then count them using the `lengths()` function."

```{R}

beforethelaw <- "Before the law sits a gatekeeper. To this gatekeeper comes a man from the country who asks to gain entry into the law. But the gatekeeper says that he cannot grant him entry at the moment. The man thinks about it and then asks if he will be allowed to come in sometime later on. “It is possible,” says the gatekeeper, “but not now.” The gate to the law stands open, as always, and the gatekeeper walks to the side, so the man bends over in order to see through the gate into the inside. When the gatekeeper notices that, he laughs and says: “If it tempts you so much, try going inside in spite of my prohibition. But take note. I am powerful. And I am only the lowliest gatekeeper. But from room to room stand gatekeepers, each more powerful than the last. I cannot endure even one glimpse of the third.” The man from the country has not expected such difficulties: the law should always be accessible for everyone, he thinks, but as he now looks more closely at the gatekeeper in his fur coat, at his large pointed nose and his long, thin, black Tartar’s beard, he decides that it would be better to wait until he gets permission to go inside. The gatekeeper gives him a stool and allows him to sit down at the side in front of the gate. There he sits for days and years. He makes many attempts to be let in, and he wears the gatekeeper out with his requests. The gatekeeper often interrogates him briefly, questioning him about his homeland and many other things, but they are indifferent questions, the kind great men put, and at the end he always tells him once more that he cannot let him inside yet. The man, who has equipped himself with many things for his journey, spends everything, no matter how valuable, to win over the gatekeeper. The latter takes it all but, as he does so, says, “I am taking this only so that you do not think you have failed to do anything.” During the many years the man observes the gatekeeper almost continuously. He forgets the other gatekeepers, and this first one seems to him the only obstacle for entry into the law. He curses the unlucky circumstance, in the first years thoughtlessly and out loud; later, as he grows old, he only mumbles to himself. He becomes childish and, since in the long years studying the gatekeeper he has also come to know the fleas in his fur collar, he even asks the fleas to help him persuade the gatekeeper. Finally his eyesight grows weak, and he does not know whether things are really darker around him or whether his eyes are merely deceiving him. But he recognizes now in the darkness an illumination which breaks inextinguishably out of the gateway to the law. Now he no longer has much time to live. Before his death he gathers up in his head all his experiences of the entire time into one question which he has not yet put to the gatekeeper. He waves to him, since he can no longer lift up his stiffening body. The gatekeeper has to bend way down to him, for the difference between them has changed considerably to the disadvantage of the man. “What do you want to know now?” asks the gatekeeper. “You are insatiable.” “Everyone strives after the law,” says the man, “so how is it that in these many years no one except me has requested entry?” The gatekeeper sees that the man is already dying and, in order to reach his diminishing sense of hearing, he shouts at him, “Here no one else can gain entry, since this entrance was assigned only to you. I’m going now to close it."

# Split the string into words based on whitespace
word_list <- strsplit(beforethelaw, "\\W+") # Split by non-word characters

# Count the words
word_count <- lengths(word_list)

word_count

```

Even this apparently short text has 640 words, which would be quite tedious to count manually. In seconds, R has accomplished what might have taken us considerable time and effort by hand.

Now, let's find the most frequently used word in the text. We'll use the table() function to count word frequencies, then identify the most common word:

```{R}
word_counts <- table(unlist(word_list))

most_frequent_word <- names(word_counts)[which.max(word_counts)]

most_frequent_word
```

The most frequently used word in the text is "the", which appears 20 times. This is a common stop word in English, so let's remove it and find the next most frequent word. Rather than manually creating our own list of stop words, we can use an existing comprehensive list prepared for this purpose, such as the one provided by [stopwords ISO](https://github.com/stopwords-iso). We'll use their English stopwords file: https://raw.githubusercontent.com/stopwords-iso/stopwords-en/refs/heads/master/stopwords-en.txt. ou don't need to download this file, as we can read it directly from the web using the `readLines()` function.

```{R}
# Read the stop words from the web
stop_words_url <- "https://raw.githubusercontent.com/stopwords-iso/stopwords-en/refs/heads/master/stopwords-en.txt"
stop_words <- readLines(stop_words_url)
# Remove common stop words
word_counts_filtered <- word_counts[!names(word_counts) %in% stop_words]
most_frequent_word_filtered <- names(word_counts_filtered)[which.max(word_counts_filtered)]
most_frequent <- word_counts_filtered[most_frequent_word_filtered]
most_frequent
```

And now we have a winner! The most frequently used word in the text, after removing common stop words, is "gatekeeper", which appears 12 times. In this text, the "gatekeeper" is not merely a character, but represents the central theme of the story. The gatekeeper serves as a complex metaphor for the complexities of the law and the seemingly infinite barriers that prevent ordinary people from accessing it—without suggesting that the law is inherently closed to them (which is why the gate remains open throughout). The intricacies of this complex story are beyond the scope of this workshop, but it is interesting to see how a simple frequency analysis can reveal the thematic core of a text.

::: {.callout-tip title="Cross-linguistic Analysis"}

Interestingly, performing the same analysis on Kafka's original German text reveals "Türhüter" (gatekeeper) as the most frequent non-stopword, matching our English results. This consistency across languages suggests that frequency analysis can reliably identify thematically central terms, even accounting for translation differences.

:::

This is a very basic example where we implemented each step manually to demonstrate the underlying processes. However, in practice, after decades of computational text analysis development, there are many specialized packages and libraries that can perform these tasks more efficiently. For example, in R, we can use the `tidytext` package to handle text data in a tidy format, making it easier to manipulate and analyze.

In the next episode, we will explore how to create a corpus of texts and prepare it for analysis. We will also cover some basic preprocessing steps, such as removing punctuation, converting text to lowercase, and tokenizing the text into words or sentences. This will establish the foundation for more advanced text analysis techniques that we will explore later in this workshop.